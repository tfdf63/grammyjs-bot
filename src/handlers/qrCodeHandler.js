const { Keyboard, InputFile } = require('grammy')
const QRCodeService = require('../services/qrCodeService')
const ErrorHandler = require('../middleware/errorHandler')
const { isValidUrl, isValidUtmTag } = require('../utils/validators')
const { sessionStates, qrFormats } = require('../config/constants')

class QRCodeHandler {
	constructor(qrCodeService) {
		this.qrCodeService = qrCodeService
		this.errorHandler = new ErrorHandler()
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /qrcode
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 */
	async handleQRCodeCommand(ctx) {
		ctx.session.step = sessionStates.WAITING_URL
		ctx.session.url = null
		ctx.session.utmTag = null
		ctx.session.finalUrl = null
		ctx.session.format = qrFormats.PNG

		await ctx.reply(
			'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥\n\n' +
				'–ü—Ä–∏–º–µ—Ä: https://example.com'
		)
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è QR-–∫–æ–¥–æ–≤
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 */
	async handleTextMessage(ctx) {
		const step = ctx.session.step
		const text = ctx.message.text

		switch (step) {
			case sessionStates.WAITING_URL:
				await this.handleWaitingUrl(ctx, text)
				break
			case sessionStates.WAITING_URL_CONFIRMATION:
				await this.handleUrlConfirmation(ctx, text)
				break
			case sessionStates.WAITING_UTM:
				await this.handleWaitingUtm(ctx, text)
				break
			case sessionStates.WAITING_CONFIRMATION:
				await this.handleConfirmation(ctx, text)
				break
			default:
				return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è URL
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	async handleWaitingUrl(ctx, text) {
		if (!isValidUrl(text)) {
			await ctx.reply(
				'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://'
			)
			return
		}

		ctx.session.url = text
		ctx.session.step = sessionStates.WAITING_URL_CONFIRMATION

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		await ctx.reply('üîó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:', {
			entities: [
				{
					type: 'url',
					offset: 0,
					length: text.length,
				},
			],
		})
		await ctx.reply(text, { link_preview_options: { is_disabled: true } })

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		const keyboard = new Keyboard()
			.text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
			.text('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
			.resized()

		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
			reply_markup: keyboard,
		})
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è URL
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	async handleUrlConfirmation(ctx, text) {
		if (text === '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') {
			ctx.session.step = sessionStates.WAITING_UTM

			await ctx.reply(
				'üè∑Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ UTM –º–µ—Ç–∫—É –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏\n\n' +
					'UTM –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo2024, newsletter',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else if (text === '‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å') {
			ctx.session.step = sessionStates.WAITING_URL
			ctx.session.url = null

			await ctx.reply(
				'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ\n\n' + '–ü—Ä–∏–º–µ—Ä: https://example.com',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else {
			await ctx.reply(
				'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.'
			)
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è UTM –º–µ—Ç–∫–∏
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	async handleWaitingUtm(ctx, text) {
		if (!isValidUtmTag(text)) {
			await ctx.reply(
				'‚ùå UTM –º–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!\n\n' +
					'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã (-) –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤.\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo-2024'
			)
			return
		}

		ctx.session.utmTag = text

		try {
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å UTM –º–µ—Ç–∫–∞–º–∏
			ctx.session.finalUrl = this.qrCodeService.createUtmUrl(
				ctx.session.url,
				ctx.session.utmTag
			)
			ctx.session.step = sessionStates.WAITING_CONFIRMATION

			await ctx.reply(
				'‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏:\n\n' +
					'üìä UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n' +
					`‚Ä¢ utm_medium: qrcode\n` +
					`‚Ä¢ utm_campaign: ${ctx.session.utmTag}\n\n` +
					'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞:'
			)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–µ–≤—å—é
			await ctx.reply(ctx.session.finalUrl, {
				link_preview_options: { is_disabled: true },
				entities: [
					{
						type: 'url',
						offset: 0,
						length: ctx.session.finalUrl.length,
					},
				],
			})

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
			const qrKeyboard = new Keyboard()
				.text('üì± PNG (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)')
				.text('üñºÔ∏è JPG (–±–µ–ª—ã–π —Ñ–æ–Ω)')
				.row()
				.text('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å UTM')
				.resized()

			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞:', {
				reply_markup: qrKeyboard,
			})
		} catch (error) {
			await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UTM —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
			ctx.session.step = null
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	async handleConfirmation(ctx, text) {
		if (text === 'üì± PNG (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)' || text === 'üñºÔ∏è JPG (–±–µ–ª—ã–π —Ñ–æ–Ω)') {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
			const format = text.includes('PNG') ? qrFormats.PNG : qrFormats.JPG
			ctx.session.format = format

			await ctx.reply(
				`‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`,
				{
					reply_markup: { remove_keyboard: true },
				}
			)

			try {
				// –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
				const qrCodeInfo = await this.qrCodeService.createQRCodeWithUtm(
					ctx.session.url,
					ctx.session.utmTag,
					format,
					ctx.from.id
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
				await ctx.replyWithDocument(
					new InputFile(qrCodeInfo.filepath, qrCodeInfo.filename),
					{
						caption: `‚úÖ QR-–∫–æ–¥ –≥–æ—Ç–æ–≤!\n\nüîó –°—Å—ã–ª–∫–∞: ${
							qrCodeInfo.finalUrl
						}\nüè∑Ô∏è UTM –º–µ—Ç–∫–∞: ${
							qrCodeInfo.utmTag
						}\nüìÅ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}`,
					}
				)

				// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
				await this.qrCodeService.cleanupQRCodeFile(qrCodeInfo.filepath)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
				this.resetSession(ctx)

				await ctx.reply(
					'üéâ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n' +
						'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /qrcode –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞.'
				)
			} catch (error) {
				this.errorHandler.handleApiError(error, 'QR code generation')
				await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
				ctx.session.step = null
			}
		} else if (text === '‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å UTM') {
			ctx.session.step = sessionStates.WAITING_UTM

			await ctx.reply(
				'üè∑Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ UTM –º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ\n\n' +
					'UTM –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo2024, newsletter',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else {
			await ctx.reply(
				'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UTM –º–µ—Ç–∫–∏.'
			)
		}
	}

	/**
	 * –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
	 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
	 */
	resetSession(ctx) {
		ctx.session.step = null
		ctx.session.url = null
		ctx.session.utmTag = null
		ctx.session.finalUrl = null
		ctx.session.format = qrFormats.PNG
	}
}

module.exports = QRCodeHandler
