// const tick = require('./4tick.js')
// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
process.noDeprecation = true

const fetch = require('node-fetch') // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å fetch
require('dotenv').config()
//–õ–æ–≥–∏–∫–∞ –±–∏–ª–µ—Ç–æ–≤
const crypto = require('crypto')
const fs = require('fs')
const path = require('path')

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è QR-–∫–æ–¥–æ–≤
const QRCode = require('qrcode')
const { session, Keyboard, InputFile } = require('grammy')

// –ö–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ ANSI –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
	green: '\x1b[32m',
	reset: '\x1b[0m',
	bright: '\x1b[1m',
	dim: '\x1b[2m',
	underscore: '\x1b[4m',
	blink: '\x1b[5m',
	cyan: '\x1b[36m',
	yellow: '\x1b[33m',
	red: '\x1b[31m',
}

// const urls = process.env.BOT_API_URL
const login = process.env.BOT_TICKETS_LOGIN
const password = process.env.BOT_TICKETS_PASSWORD
const timestamp = Math.floor(Date.now() / 1000) // –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é MD5, –∑–∞—Ç–µ–º —Å –ø–æ–º–æ—â—å—é SHA1
const hashedPassword = crypto
	.createHash('sha1')
	.update(crypto.createHash('md5').update(password).digest('hex') + timestamp)
	.digest('hex')

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
const resultString = `${login}:${hashedPassword}:${timestamp}`

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞—Ç—á–µ–π
const matches = require('./matches.js')

// ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
const CHANNEL_ID = '-1002396067751'

async function ticketsGetInfo(resultString, eventId) {
	const url = `https://api.tickets.yandex.net/api/crm/?action=crm.order.ticket.list&auth=${resultString}&city_id=3296193&event_id=${eventId}`
	const response = await fetch(url)

	if (!response.ok) {
		throw new Error('Network response was not ok')
	}

	const data = await response.json()
	if (data.status === '0') {
		const results = data.result
		const tickets = {
			allCount: results.length,
			count: results.filter(item => item.price !== 0).length,
			totalPrice: results.reduce((sum, ticket) => sum + ticket.price, 0),
		}
		return tickets
	} else {
		throw new Error(`–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: ${data.error}`)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
function formatNumber(num) {
	return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
async function processAllMatches(resultString, matches) {
	const results = []

	for (const match of matches) {
		try {
			const tickets = await ticketsGetInfo(resultString, match.eventId)
			results.push({
				match: match,
				tickets: tickets,
			})
		} catch (error) {
			console.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–∞ ${match.game}:`,
				error
			)
			results.push({
				match: match,
				error: error.message,
			})
		}
	}

	return results
}

//–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤

const { Bot, GrammyError, HttpError } = require('grammy')

const bot = new Bot(process.env.BOT_API_KEY)

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(
	session({
		initial: () => ({
			step: null,
			url: null,
			utmTag: null,
			finalUrl: null,
			format: 'png',
		}),
	})
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Morgan
// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logsDir = path.join(__dirname, 'logs')
if (!fs.existsSync(logsDir)) {
	fs.mkdirSync(logsDir)
}

// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const accessLogStream = fs.createWriteStream(
	path.join(logsDir, 'telegram-bot.log'),
	{ flags: 'a' }
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ Telegram –±–æ—Ç–∞
const logTelegramRequest = ctx => {
	if (!ctx.from) return

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –°–∞–º–∞—Ä—ã (UTC+4)
	const now = new Date()
	// –î–æ–±–∞–≤–ª—è–µ–º 4 —á–∞—Å–∞ –¥–ª—è –°–∞–º–∞—Ä—ã
	const samaraOffset = 4 * 60 * 60 * 1000
	const samaraTime = new Date(now.getTime() + samaraOffset)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	const year = samaraTime.getUTCFullYear()
	const month = String(samaraTime.getUTCMonth() + 1).padStart(2, '0')
	const day = String(samaraTime.getUTCDate()).padStart(2, '0')
	const hours = String(samaraTime.getUTCHours()).padStart(2, '0')
	const minutes = String(samaraTime.getUTCMinutes()).padStart(2, '0')
	const seconds = String(samaraTime.getUTCSeconds()).padStart(2, '0')

	const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`

	const username = ctx.from.username || 'anonymous'
	const userId = ctx.from.id
	const firstName = ctx.from.first_name || ''
	const lastName = ctx.from.last_name || ''
	const command = ctx.message?.text || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'

	const logEntry = `[${timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username} (${firstName} ${lastName}, ID: ${userId}) | –ó–∞–ø—Ä–æ—Å: ${command}`

	// –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
	console.log(`${colors.cyan}${logEntry}${colors.reset}`)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
	fs.appendFileSync(path.join(logsDir, 'telegram-bot.log'), logEntry + '\n')
}

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
	},
	{
		command: 'tickets',
		description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö',
	},
	{
		command: 'qrcode',
		description: '–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ —Å UTM –º–µ—Ç–∫–æ–π',
	},
])

// –ú–∏–¥–ª–≤–∞—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
bot.use((ctx, next) => {
	logTelegramRequest(ctx)
	return next()
})

bot.command('start', async ctx => {
	await ctx.react('üëç')
	await ctx.reply(
		'–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –§–ö "–ê–∫—Ä–æ–Ω". –ú–æ–ª–æ–¥–æ–π –∏ –∑–≤–æ–Ω–∫–∏–π! <span class="tg-spoiler">–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</span>\n\n' +
			'üéØ –¢–∞–∫–∂–µ —è —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å QR-–∫–æ–¥—ã —Å UTM –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.\n\n' +
			'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
			'/tickets - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö\n' +
			'/qrcode - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ —Å UTM –º–µ—Ç–∫–æ–π',
		{
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		}
	)
})

bot.command('tickets', async ctx => {
	try {
		const message = await formatTicketsMessage()

		await ctx.reply(message, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	} catch (error) {
		console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö:', error)
		await ctx.reply(
			'–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö.'
		)
	}
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
bot.command('test_channel', async ctx => {
	try {
		await ctx.reply('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª...')
		await sendTicketsToChannel()
		await ctx.reply('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!')
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error)
		await ctx.reply(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.'
		)
	}
})

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
bot.command('qrcode', async ctx => {
	ctx.session.step = 'waiting_url'
	ctx.session.url = null
	ctx.session.utmTag = null
	ctx.session.finalUrl = null
	ctx.session.format = 'png'

	await ctx.reply(
		'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥\n\n' +
			'–ü—Ä–∏–º–µ—Ä: https://example.com'
	)
})

// <b>${ticketsSum}—Ä—É–±.</b>
bot.hears(/–ø–∏–ø–µ—Ü/, async ctx => {
	await ctx.reply('–†—É–≥–∞–µ–º—Å—è?')
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è QR-–∫–æ–¥–æ–≤
bot.on('message:text', async ctx => {
	const step = ctx.session.step
	const text = ctx.message.text

	if (step === 'waiting_url') {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
		if (!isValidUrl(text)) {
			await ctx.reply(
				'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://'
			)
			return
		}

		ctx.session.url = text
		ctx.session.step = 'waiting_url_confirmation'

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		await ctx.reply('üîó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:', {
			entities: [
				{
					type: 'url',
					offset: 0,
					length: text.length,
				},
			],
		})
		await ctx.reply(text, { link_preview_options: { is_disabled: true } })

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		const keyboard = new Keyboard()
			.text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
			.text('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
			.resized()

		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
			reply_markup: keyboard,
		})
	} else if (step === 'waiting_url_confirmation') {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
		if (text === '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') {
			ctx.session.step = 'waiting_utm'

			await ctx.reply(
				'üè∑Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ UTM –º–µ—Ç–∫—É –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏\n\n' +
					'UTM –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo2024, newsletter',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else if (text === '‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å') {
			ctx.session.step = 'waiting_url'
			ctx.session.url = null

			await ctx.reply(
				'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ\n\n' + '–ü—Ä–∏–º–µ—Ä: https://example.com',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else {
			await ctx.reply(
				'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.'
			)
		}
	} else if (step === 'waiting_utm') {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º UTM –º–µ—Ç–∫—É –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
		if (text.includes(' ')) {
			await ctx.reply(
				'‚ùå UTM –º–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!\n\n' +
					'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã (-) –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤.\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo-2024'
			)
			return
		}

		if (text.length === 0) {
			await ctx.reply(
				'‚ùå UTM –º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!\n\n' +
					'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ UTM –º–µ—Ç–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.'
			)
			return
		}

		ctx.session.utmTag = text

		try {
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å UTM –º–µ—Ç–∫–∞–º–∏
			ctx.session.finalUrl = createUtmUrl(ctx.session.url, ctx.session.utmTag)
			ctx.session.step = 'waiting_confirmation'

			await ctx.reply(
				'‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏:\n\n' +
					'üìä UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n' +
					`‚Ä¢ utm_medium: qrcode\n` +
					`‚Ä¢ utm_campaign: ${ctx.session.utmTag}\n\n` +
					'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞:'
			)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–µ–≤—å—é
			await ctx.reply(ctx.session.finalUrl, {
				link_preview_options: { is_disabled: true },
				entities: [
					{
						type: 'url',
						offset: 0,
						length: ctx.session.finalUrl.length,
					},
				],
			})

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
			const qrKeyboard = new Keyboard()
				.text('üì± PNG (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)')
				.text('üñºÔ∏è JPG (–±–µ–ª—ã–π —Ñ–æ–Ω)')
				.row()
				.text('‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å UTM')
				.resized()

			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞:', {
				reply_markup: qrKeyboard,
			})
		} catch (error) {
			await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UTM —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
			ctx.session.step = null
		}
	} else if (step === 'waiting_confirmation') {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
		if (text === 'üì± PNG (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)' || text === 'üñºÔ∏è JPG (–±–µ–ª—ã–π —Ñ–æ–Ω)') {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
			const format = text.includes('PNG') ? 'png' : 'jpg'
			ctx.session.format = format

			await ctx.reply(
				`‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`,
				{
					reply_markup: { remove_keyboard: true },
				}
			)

			try {
				// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
				const filename = `qrcode_${ctx.from.id}_${Date.now()}.${format}`
				const filepath = path.join(process.cwd(), filename)

				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
				await generateQRCode(ctx.session.finalUrl, filepath, format)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
				await ctx.replyWithDocument(new InputFile(filepath, filename), {
					caption: `‚úÖ QR-–∫–æ–¥ –≥–æ—Ç–æ–≤!\n\nüîó –°—Å—ã–ª–∫–∞: ${
						ctx.session.finalUrl
					}\nüè∑Ô∏è UTM –º–µ—Ç–∫–∞: ${
						ctx.session.utmTag
					}\nüìÅ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}`,
				})

				// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
				await fs.promises.unlink(filepath)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
				ctx.session.step = null
				ctx.session.url = null
				ctx.session.utmTag = null
				ctx.session.finalUrl = null
				ctx.session.format = 'png'

				await ctx.reply(
					'üéâ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n' +
						'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /qrcode –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞.'
				)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error)
				await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
				ctx.session.step = null
			}
		} else if (text === '‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å UTM') {
			ctx.session.step = 'waiting_utm'

			await ctx.reply(
				'üè∑Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ UTM –º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ\n\n' +
					'UTM –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)\n' +
					'–ü—Ä–∏–º–µ—Ä: summer_sale, promo2024, newsletter',
				{ reply_markup: { remove_keyboard: true } }
			)
		} else {
			await ctx.reply(
				'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UTM –º–µ—Ç–∫–∏.'
			)
		}
	} else {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		// (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º)
		return
	}
})

bot.catch(err => {
	const ctx = err.ctx
	console.error(`Error while handling update ${ctx.update.update_id}:`)
	const e = err.error
	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
	} else if (e instanceof HttpError) {
		console.error('Could not contact Telegram:', e)
	} else console.error('Unknown error:', e)
})

bot.start()
console.log(
	`${colors.cyan}–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! ${colors.green}–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.${colors.reset}`
)

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
function isValidUrl(string) {
	try {
		const url = new URL(string)
		return url.protocol === 'http:' || url.protocol === 'https:'
	} catch (_) {
		return false
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UTM —Å—Å—ã–ª–∫–∏
function createUtmUrl(baseUrl, utmTag) {
	try {
		const url = new URL(baseUrl)

		// –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		url.searchParams.set('utm_medium', 'qrcode')
		url.searchParams.set('utm_campaign', utmTag)

		return url.toString()
	} catch (error) {
		throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UTM —Å—Å—ã–ª–∫–∏')
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
async function generateQRCode(text, filename, format = 'png') {
	try {
		const options = {
			type: format,
			quality: 0.92,
			margin: 1,
			color: {
				dark: '#000000',
				light: format === 'png' ? '#0000' : '#FFFFFF', // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è PNG, –±–µ–ª—ã–π –¥–ª—è JPG
			},
			width: 512,
		}

		await QRCode.toFile(filename, text, options)
		return filename
	} catch (error) {
		throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö (–≤—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã)
async function formatTicketsMessage() {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º
		const allResults = await processAllMatches(resultString, matches)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç—á–∞–º–∏
		let message = '<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ò–õ–ï–¢–ê–• –ü–û –í–°–ï–ú –ú–ê–¢–ß–ê–ú</b>\n\n'

		for (let i = 0; i < allResults.length; i++) {
			const result = allResults[i]

			if (result.error) {
				message += `‚ùå <b>${result.match.game}</b>\n`
				message += `–û—à–∏–±–∫–∞: ${result.error}\n\n`
				continue
			}

			const { match, tickets } = result

			// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
			const planCompletionPercent = (
				(tickets.totalPrice / match.planRevenue) *
				100
			).toFixed(0)
			const averageTicketPrice =
				tickets.count > 0 ? Math.round(tickets.totalPrice / tickets.count) : 0

			message += `<b>${match.game}</b>\n\n`
			message += `–ü—Ä–æ–¥–∞–Ω–æ: <b>${formatNumber(tickets.count)}</b>\n`
			message += `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö: <b>${formatNumber(
				tickets.allCount - tickets.count
			)}</b>\n`
			message += `–°—É–º–º–∞: <b>${formatNumber(tickets.totalPrice)} ‚ÇΩ</b>\n`
			message += `–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>${formatNumber(
				averageTicketPrice
			)} ‚ÇΩ</b>\n\n`
			// message += `–ü–ª–∞–Ω: <b>${formatNumber(match.planTickets)} –±–∏–ª–µ—Ç–æ–≤</b>\n`
			message += `–ü–ª–∞–Ω: <b>${formatNumber(match.planRevenue)} ‚ÇΩ</b>\n`
			message += `–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞: <b>${planCompletionPercent}%</b>\n`
			message += `–ò—Ç–æ–≥–æ: <b>${formatNumber(tickets.allCount)}</b>\n`

			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
			if (i < allResults.length - 1) {
				message += '\n' + '‚îÄ'.repeat(12) + '\n\n'
			}
		}

		return message
	} catch (error) {
		console.error(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö:',
			error
		)
		return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö.'
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö –≤ –∫–∞–Ω–∞–ª
async function sendTicketsToChannel() {
	try {
		console.log(
			`${
				colors.yellow
			}[${new Date().toISOString()}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –±–∏–ª–µ—Ç–∞—Ö –≤ –∫–∞–Ω–∞–ª...${
				colors.reset
			}`
		)

		const message = await formatTicketsMessage()

		await bot.api.sendMessage(CHANNEL_ID, message, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})

		console.log(
			`${
				colors.green
			}[${new Date().toISOString()}] –û—Ç—á–µ—Ç –æ –±–∏–ª–µ—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª${
				colors.reset
			}`
		)

		// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
		const logEntry = `[${new Date().toISOString()}] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –±–∏–ª–µ—Ç–∞—Ö –≤ –∫–∞–Ω–∞–ª ${CHANNEL_ID} - –£–°–ü–ï–®–ù–û`
		fs.appendFileSync(path.join(logsDir, 'telegram-bot.log'), logEntry + '\n')
	} catch (error) {
		console.error(
			`${
				colors.red
			}[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:${
				colors.reset
			}`,
			error
		)

		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
		const logEntry = `[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ${CHANNEL_ID}: ${
			error.message
		}`
		fs.appendFileSync(path.join(logsDir, 'telegram-bot.log'), logEntry + '\n')
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç (11:00 –ø–æ —Å–∞–º–∞—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
function shouldSendReport() {
	const now = new Date()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –°–∞–º–∞—Ä–µ (UTC+4)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º 4 —á–∞—Å–∞ –∫ UTC
	const samaraOffset = 4 * 60 * 60 * 1000 // 4 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	const samaraTime = new Date(now.getTime() + samaraOffset)

	const hours = samaraTime.getUTCHours()
	const minutes = samaraTime.getUTCMinutes()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ 11:00 –ø–æ —Å–∞–º–∞—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
	return hours === 11 && minutes === 0
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
function startScheduler() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	setInterval(() => {
		if (shouldSendReport()) {
			sendTicketsToChannel()
		}
	}, 60 * 1000) // 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞

	console.log(
		`${colors.cyan}–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω${colors.reset}`
	)
	console.log(
		`${colors.cyan}–û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª ${CHANNEL_ID} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00 –ø–æ —Å–∞–º–∞—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏${colors.reset}`
	)
}

startScheduler()
