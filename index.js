// const tick = require('./4tick.js')
require('dotenv').config();
//–õ–æ–≥–∏–∫–∞ –±–∏–ª–µ—Ç–æ–≤
const crypto = require('crypto');

const login = process.env.BOT_TICKETS_LOGIN;
const password = process.env.BOT_TICKETS_PASSWORD;
const timestamp = Math.floor(Date.now() / 1000); // –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é MD5, –∑–∞—Ç–µ–º —Å –ø–æ–º–æ—â—å—é SHA1
const hashedPassword = crypto
  .createHash('sha1')
  .update(crypto.createHash('md5').update(password).digest('hex') + timestamp)
  .digest('hex');

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
const resultString = `${login}:${hashedPassword}:${timestamp}`;
//–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
let game = '–ê–∫—Ä–æ–Ω —Ö –î–∏–Ω–∞–º–æ // 12.05.2024';
//–°—É–º–º–∞ –±–∏–ª–µ—Ç–æ–≤
let ticketsSum = 0;
let ticketsAllCount = 0;
let ticketsCount = 0;
let ticketsFreeCount = 0;

const url = `https://api.tickets.yandex.net/api/crm/?action=crm.order.ticket.list&auth=${resultString}&city_id=3296193&event_id=17771827`;
fetch(url)
  .then((response) => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then((data) => {
    if ((data.status = '0')) {
      const results = data.result;
      //–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
      ticketsAllCount = results.length;
      let filterData = results.filter((item) => item.price !== 0);
      ticketsCount = filterData.length;
      ticketsFreeCount = ticketsAllCount - ticketsCount;

      results.forEach((result) => {
        ticketsSum += result.price;
      });
      game = '–ê–∫—Ä–æ–Ω —Ö –î–∏–Ω–∞–º–æ / 12.05.2024';
      ticketsSum = ticketsSum;
      ticketsCount = ticketsCount;
      ticketsFreeCount = ticketsFreeCount;
      ticketsAllCount = ticketsAllCount;
    } else {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', data.error);
    }
  });
//–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤

const { Bot, GrammyError, HttpError } = require('grammy');

const bot = new Bot(process.env.BOT_API_KEY);

bot.api.setMyCommands([
  {
    command: 'start',
    description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
  },
  {
    command: 'tickets',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö',
  },
]);

bot.command('start', async (ctx) => {
  await ctx.react('üëç');
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –§–ö "–ê–∫—Ä–æ–Ω". –ú–æ–ª–æ–¥–æ–π –∏ –∑–≤–æ–Ω–∫–∏–π! <span class="tg-spoiler">–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</span>',
    {
      parse_mode: 'HTML',
      disable_web_page_priview: true,
    }
  );
});

bot.command('tickets', async (ctx) => {
  await ctx.reply(
    `
  <b>${game}</b>

  –ü—Ä–æ–¥–∞–Ω–æ: <b>${ticketsCount}</b>
  –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö: <b>${ticketsFreeCount}</b>

  –ò—Ç–æ–≥–æ: <b>${ticketsAllCount}</b>
  `,
    {
      parse_mode: 'HTML',
      disable_web_page_priview: true,
    }
  );
});
// <b>${ticketsSum}—Ä—É–±.</b>
bot.hears(/–ø–∏–ø–µ—Ü/, async (ctx) => {
  await ctx.reply('–†—É–≥–∞–µ–º—Å—è?');
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e);
  } else console.error('Unknown error:', e);
});
bot.start();
console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
