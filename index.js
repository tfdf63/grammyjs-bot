// const tick = require('./4tick.js')
// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
process.noDeprecation = true

const fetch = require('node-fetch') // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å fetch
require('dotenv').config()
//–õ–æ–≥–∏–∫–∞ –±–∏–ª–µ—Ç–æ–≤
const crypto = require('crypto')
const morgan = require('morgan') // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º morgan –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const fs = require('fs')
const path = require('path')

// –ö–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ ANSI –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
	green: '\x1b[32m',
	reset: '\x1b[0m',
	bright: '\x1b[1m',
	dim: '\x1b[2m',
	underscore: '\x1b[4m',
	blink: '\x1b[5m',
	cyan: '\x1b[36m',
	yellow: '\x1b[33m',
	red: '\x1b[31m',
}

// const urls = process.env.BOT_API_URL
const login = process.env.BOT_TICKETS_LOGIN
const password = process.env.BOT_TICKETS_PASSWORD
const timestamp = Math.floor(Date.now() / 1000) // –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é MD5, –∑–∞—Ç–µ–º —Å –ø–æ–º–æ—â—å—é SHA1
const hashedPassword = crypto
	.createHash('sha1')
	.update(crypto.createHash('md5').update(password).digest('hex') + timestamp)
	.digest('hex')

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
const resultString = `${login}:${hashedPassword}:${timestamp}`

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞—Ç—á–µ–π
const matches = require('./matches.js')

async function ticketsGetInfo(resultString, eventId) {
	const url = `https://api.tickets.yandex.net/api/crm/?action=crm.order.ticket.list&auth=${resultString}&city_id=3296193&event_id=${eventId}`
	const response = await fetch(url)

	if (!response.ok) {
		throw new Error('Network response was not ok')
	}

	const data = await response.json()
	if (data.status === '0') {
		const results = data.result
		const tickets = {
			allCount: results.length,
			count: results.filter(item => item.price !== 0).length,
			totalPrice: results.reduce((sum, ticket) => sum + ticket.price, 0),
		}
		return tickets
	} else {
		throw new Error(`–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: ${data.error}`)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
function formatNumber(num) {
	return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
async function processAllMatches(resultString, matches) {
	const results = []

	for (const match of matches) {
		try {
			const tickets = await ticketsGetInfo(resultString, match.eventId)
			results.push({
				match: match,
				tickets: tickets,
			})
		} catch (error) {
			console.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–∞ ${match.game}:`,
				error
			)
			results.push({
				match: match,
				error: error.message,
			})
		}
	}

	return results
}

//–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤

const { Bot, GrammyError, HttpError } = require('grammy')

const bot = new Bot(process.env.BOT_API_KEY)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Morgan
// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logsDir = path.join(__dirname, 'logs')
if (!fs.existsSync(logsDir)) {
	fs.mkdirSync(logsDir)
}

// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const accessLogStream = fs.createWriteStream(
	path.join(logsDir, 'telegram-bot.log'),
	{ flags: 'a' }
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ Telegram –±–æ—Ç–∞
const logTelegramRequest = ctx => {
	if (!ctx.from) return

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –°–∞–º–∞—Ä—ã (UTC+4)
	const now = new Date()
	// –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç UTC –∏ –¥–æ–±–∞–≤–ª—è–µ–º 4 —á–∞—Å–∞ –¥–ª—è –°–∞–º–∞—Ä—ã
	const samaraTime = new Date(now.getTime() + 4 * 60 * 60 * 1000)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	const year = samaraTime.getUTCFullYear()
	const month = String(samaraTime.getUTCMonth() + 1).padStart(2, '0')
	const day = String(samaraTime.getUTCDate()).padStart(2, '0')
	const hours = String(samaraTime.getUTCHours()).padStart(2, '0')
	const minutes = String(samaraTime.getUTCMinutes()).padStart(2, '0')
	const seconds = String(samaraTime.getUTCSeconds()).padStart(2, '0')

	const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`

	const username = ctx.from.username || 'anonymous'
	const userId = ctx.from.id
	const firstName = ctx.from.first_name || ''
	const lastName = ctx.from.last_name || ''
	const command = ctx.message?.text || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'

	const logEntry = `[${timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username} (${firstName} ${lastName}, ID: ${userId}) | –ó–∞–ø—Ä–æ—Å: ${command}`

	// –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
	console.log(`${colors.cyan}${logEntry}${colors.reset}`)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
	fs.appendFileSync(path.join(logsDir, 'telegram-bot.log'), logEntry + '\n')
}

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
	},
	{
		command: 'tickets',
		description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö',
	},
])

// –ú–∏–¥–ª–≤–∞—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
bot.use((ctx, next) => {
	logTelegramRequest(ctx)
	return next()
})

bot.command('start', async ctx => {
	await ctx.react('üëç')
	await ctx.reply(
		'–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –§–ö "–ê–∫—Ä–æ–Ω". –ú–æ–ª–æ–¥–æ–π –∏ –∑–≤–æ–Ω–∫–∏–π! <span class="tg-spoiler">–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</span>',
		{
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		}
	)
})

bot.command('tickets', async ctx => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º
		const allResults = await processAllMatches(resultString, matches)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç—á–∞–º–∏
		let message = '<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ò–õ–ï–¢–ê–• –ü–û –í–°–ï–ú –ú–ê–¢–ß–ê–ú</b>\n\n'

		for (let i = 0; i < allResults.length; i++) {
			const result = allResults[i]

			if (result.error) {
				message += `‚ùå <b>${result.match.game}</b>\n`
				message += `–û—à–∏–±–∫–∞: ${result.error}\n\n`
				continue
			}

			const { match, tickets } = result

			// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
			const planCompletionPercent = (
				(tickets.totalPrice / match.planRevenue) *
				100
			).toFixed(0)
			const averageTicketPrice =
				tickets.count > 0 ? Math.round(tickets.totalPrice / tickets.count) : 0

			message += `<b>${match.game}</b>\n\n`
			message += `–ü—Ä–æ–¥–∞–Ω–æ: <b>${formatNumber(tickets.count)}</b>\n`
			message += `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö: <b>${formatNumber(
				tickets.allCount - tickets.count
			)}</b>\n`
			message += `–°—É–º–º–∞: <b>${formatNumber(tickets.totalPrice)} ‚ÇΩ</b>\n`
			message += `–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>${formatNumber(
				averageTicketPrice
			)} ‚ÇΩ</b>\n\n`
			// message += `–ü–ª–∞–Ω: <b>${formatNumber(match.planTickets)} –±–∏–ª–µ—Ç–æ–≤</b>\n`
			message += `–ü–ª–∞–Ω: <b>${formatNumber(match.planRevenue)} ‚ÇΩ</b>\n`
			message += `–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞: <b>${planCompletionPercent}%</b>\n`
			message += `–ò—Ç–æ–≥–æ: <b>${formatNumber(tickets.allCount)}</b>\n`

			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
			if (i < allResults.length - 1) {
				message += '\n' + '‚îÄ'.repeat(12) + '\n\n'
			}
		}

		await ctx.reply(message, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	} catch (error) {
		console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö:', error)
		await ctx.reply(
			'–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö.'
		)
	}
})
// <b>${ticketsSum}—Ä—É–±.</b>
bot.hears(/–ø–∏–ø–µ—Ü/, async ctx => {
	await ctx.reply('–†—É–≥–∞–µ–º—Å—è?')
})

bot.catch(err => {
	const ctx = err.ctx
	console.error(`Error while handling update ${ctx.update.update_id}:`)
	const e = err.error
	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
	} else if (e instanceof HttpError) {
		console.error('Could not contact Telegram:', e)
	} else console.error('Unknown error:', e)
})

bot.start()
console.log(
	`${colors.cyan}–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! ${colors.green}–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.${colors.reset}`
)
